# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                           controllers.Application.index

# Test page
GET         /test/:id                                   controllers.Application.test(id: String)
#To get play introduction
GET         /playDoc                                    controllers.Application.playDoc

# Get settings to add a new item
GET         /add/:id                                    controllers.Application.add(id: String)
# Post request to add a new item (posted data specified id and item type)
POST        /add/:id                                    controllers.Application.addFromForm(id: String)

# Get settings to add a new item
GET         /addStack                                   controllers.Application.addStack
# Post request to add a new item (posted data specified id and item type)
POST        /stackIDs                                   controllers.Application.getStackIDs

# Delete confirm and actual delete from get parameter
GET         /deleteConfirm/:id                          controllers.Application.deleteCheck(id: String)
GET         /delete/:id                                 controllers.Application.deleteByID(id: String)

# Retrieve item
GET         /find                                       controllers.FindController.find
# Find from posted data
POST        /search                                     controllers.FindController.findFromForm
# Find from get parameter
GET         /find/:id                                   controllers.Application.findByID(id: String)

# Get new tube settings
GET         /tube/add/:id                               controllers.TubeController.addTube(id: String)
# Create tube from posted data
POST        /tube/addForm/:id                           controllers.TubeController.createTubeFromForm(id: String)
# Get new tube stack settings
POST        /tube/addStack                              controllers.TubeController.addTubeStack()
# Display to edit existing tube settings
GET         /tube/:id                                   controllers.TubeController.findTubeByID(id: String)
# Update tube from posted data
POST        /tube/update/:id                            controllers.TubeController.updateTubeFromForm(id: String)

# Get new plate settings
GET         /plate/add/:id                              controllers.PlateController.addPlate(id: String)
# Create plate from posted data
POST        /plate/addForm/:id                          controllers.PlateController.createPlateFromForm(id: String)
# Get new plate stack settings
POST        /plate/addStack                             controllers.PlateController.addPlateStack()
# Display to edit existing plate settings
GET         /plate/:id                                  controllers.PlateController.findPlateByID(id: String)
# Update plate from posted data
POST        /plate/update/:id                           controllers.PlateController.updatePlateFromForm(id: String)

# Get new rack settings
GET         /rack/add/:id                               controllers.RackController.addRack(id: String)
# Create rack from posted data
POST        /rack/addForm/:id                           controllers.RackController.createRackFromForm(id: String)
# Get new rack stack settings
POST        /rack/addStack                              controllers.RackController.addRackStack()
# Display to edit existing rack settings
GET         /rack/:id                                   controllers.RackController.findRackByID(id: String)
# Update rack from posted data
POST        /rack/update/:id                            controllers.RackController.updateRackFromForm(id: String)

# Get new freezer settings
GET         /freezer/add/:id                            controllers.FreezerController.addFreezer(id: String)
# Create freezer from posted data
POST        /freezer/addForm/:id                        controllers.FreezerController.createFreezerFromForm(id: String)
# Get new freezer stack settings
POST        /freezer/addStack                           controllers.FreezerController.addFreezerStack()
# Display to edit existing freezer settings
GET         /freezer/:id                                controllers.FreezerController.findFreezerByID(id: String)
# Update freezer from posted data
POST        /freezer/update/:id                         controllers.FreezerController.updateFreezerFromForm(id: String)

# Do BSP report for specified rack
GET         /rack/BSPreport/:id                         controllers.RackController.doBSPReport(id: String)

# Initial transfer requests - first one with just ids, other with all parameters
GET         /transfer                                   controllers.TransferController.transfer(fromID: Option[String], toID: Option[String], project: Option[String])
GET         /transferWithParams/:fromID/:toID           controllers.TransferController.transferWithParams(fromID: String, toID: String, project: Option[String], fromQuad: Boolean, toQuad: Boolean, dataMandatory: Boolean, isQuadToQuad: Boolean, isQuadToTube: Boolean, isTubeToQuad: Boolean, isTubeToMany: Boolean)
# Transfer using input from form that includes just IDs - may be enough to do transfer or we may need to get quadrants
POST        /transferIDs                                controllers.TransferController.transferIDs
# Transfer using input from form that includes IDs and quadrants
POST        /transfer                                   controllers.TransferController.transferFromForm
POST        /transferCherries                           controllers.TransferController.transferCherriesFromForm

# Initial transfer delete
GET         /transferDelete/:id                         controllers.TransferDeleteController.deleteTransfer(id: String)
POST        /transferDeleteFromForm/:id                 controllers.TransferDeleteController.deleteTransferFromForm(id: String)
GET         /transferDeleteWithIDs/:fromID/:toID        controllers.TransferDeleteController.deleteTransferByIDs(fromID: String, toID: String)

# Initial EZPASS request
GET         /EZPASS/:id                                 controllers.EZPassController.ezpass(id: String)
# Post from form with parameters needed (e.g., dilution) to create EZPASS
POST        /EZPASS/create/:id/:output                  controllers.EZPassController.createEZPass(id: String, output: String)

# Make a display of the graph of transfers into and out of a component
GET         /display/:id                                controllers.Application.graphDisplay(id: String)

# Make a display of the graph of transfers into and out of a component
GET         /displayTransfer/:from/:to                  controllers.Application.transferDisplay(from: String, to: String)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                               controllers.Assets.at(path="/public", file)

# Retrieve tags - typically called as an ajax function
GET         /tags                                       controllers.Application.tags
# Routes that can be called from javascript (e.g., ajax)
GET         /javascriptRoutes                           controllers.Application.javascriptRoutes

# Display contents
GET         /contents/:id                               controllers.Application.contents(id: String)

# Display robot instructions
GET         /robot/:abRack/:abPlate/:sampleRack         controllers.Application.makeABPlate(abRack, abPlate, sampleRack)


